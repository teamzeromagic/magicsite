"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4934],{3773:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>a});var t=i(4848),o=i(8453);const l={sidebar_position:1,title:"If Else",description:"Learn to about If Else!",sidebar_label:"If Else"},s="If Else",r={id:"restapi/flow-builder/blocks/flow-control/if-else",title:"If Else",description:"Learn to about If Else!",source:"@site/docs/restapi/flow-builder/blocks/flow-control/if-else.md",sourceDirName:"restapi/flow-builder/blocks/flow-control",slug:"/restapi/flow-builder/blocks/flow-control/if-else",permalink:"/docs/restapi/flow-builder/blocks/flow-control/if-else",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/restapi/flow-builder/blocks/flow-control/if-else.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"If Else",description:"Learn to about If Else!",sidebar_label:"If Else"},sidebar:"magicSidebar",previous:{title:"Flow Control",permalink:"/docs/category/flow-control"},next:{title:"Extended If Else",permalink:"/docs/restapi/flow-builder/blocks/flow-control/extended-if-else"}},c={},a=[{value:"Branch Selection:",id:"branch-selection",level:3},{value:"Multiple Conditions and Grouping",id:"multiple-conditions-and-grouping",level:3},{value:"Condition Editor",id:"condition-editor",level:3},{value:"Data Types",id:"data-types",level:3},{value:"Return Value",id:"return-value",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"if-else",children:"If Else"}),"\n",(0,t.jsx)(n.p,{children:"The If-Else Block component provides conditional branching within your application's logic flow. It allows you to execute different code sections based on the evaluation of a specified condition"}),"\n",(0,t.jsx)(n.h3,{id:"branch-selection",children:"Branch Selection:"}),"\n",(0,t.jsx)(n.p,{children:"Based on the outcome of the condition evaluation (True or False), the corresponding code block within the If-Else Block is executed."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"True Branch"}),": If the condition evaluates to True, the code within the True block (if present) is executed."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"False Branch"}),": If the condition evaluates to False, the code within the False block (if present) is executed."]}),"\n",(0,t.jsx)(n.h3,{id:"multiple-conditions-and-grouping",children:"Multiple Conditions and Grouping"}),"\n",(0,t.jsx)(n.p,{children:"The Multiple Conditions and Grouping feature enables to create intricate logical statements by evaluating multiple conditions within a single action."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Connecting Conditions"}),": Conditions can be connected using 'AND' or 'OR' operators to specify how the conditions relate to each other"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Grouping Conditions:"})," Groups can contain nested conditions, enabling the creation of layered logic statements similar to combining multiple 'if' statements."]}),"\n",(0,t.jsx)(n.h3,{id:"condition-editor",children:"Condition Editor"}),"\n",(0,t.jsx)(n.p,{children:"Conditions are built using an intuitive graphical interface, allowing users to select variables, comparison operators, and corresponding values. The supported operators for constructing these conditions include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Equals / Does not equal"}),"\n",(0,t.jsx)(n.li,{children:"Greater than / Greater than or equal"}),"\n",(0,t.jsx)(n.li,{children:"Less than / Less than or equal"}),"\n",(0,t.jsx)(n.li,{children:"Contains"}),"\n",(0,t.jsx)(n.li,{children:"In / Not In"}),"\n",(0,t.jsx)(n.li,{children:"Starts with"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"data-types",children:"Data Types"}),"\n",(0,t.jsx)(n.p,{children:"Both the left-hand side and right-hand side support a variety of data types, including:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Booleans (true, false)"}),"\n",(0,t.jsx)(n.li,{children:"Strings"}),"\n",(0,t.jsx)(n.li,{children:"Numbers"}),"\n",(0,t.jsx)(n.li,{children:"Dates"}),"\n",(0,t.jsxs)(n.li,{children:["Variables (indicated with double curly braces: ",(0,t.jsx)(n.code,{children:"{{myVar}}"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Null / Undefined (null)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"return-value",children:"Return Value"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"val"})," - Returns the result of the condition evaluation, indicating whether the condition evaluated to true or false."]}),"\n",(0,t.jsx)(n.admonition,{title:"Deleting If Else Block",type:"warning",children:(0,t.jsx)(n.p,{children:"Deleting If-Else block will delete the entire flow connected to the block."})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var t=i(6540);const o={},l=t.createContext(o);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);