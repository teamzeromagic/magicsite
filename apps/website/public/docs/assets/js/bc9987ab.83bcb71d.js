"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4254],{1755:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>p,frontMatter:()=>n,metadata:()=>a,toc:()=>c});var s=r(4848),o=r(8453);const n={sidebar_position:3,title:"Update Records",description:"Learn to about Update Records!",sidebar_label:"Update Records"},d="Update Records",a={id:"restapi/flow-builder/blocks/database-blocks/update-records",title:"Update Records",description:"Learn to about Update Records!",source:"@site/docs/restapi/flow-builder/blocks/database-blocks/update-records.md",sourceDirName:"restapi/flow-builder/blocks/database-blocks",slug:"/restapi/flow-builder/blocks/database-blocks/update-records",permalink:"/docs/restapi/flow-builder/blocks/database-blocks/update-records",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/restapi/flow-builder/blocks/database-blocks/update-records.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Update Records",description:"Learn to about Update Records!",sidebar_label:"Update Records"},sidebar:"magicSidebar",previous:{title:"Read Records",permalink:"/docs/restapi/flow-builder/blocks/database-blocks/read-records"},next:{title:"Delete Records",permalink:"/docs/restapi/flow-builder/blocks/database-blocks/delete-records"}},i={},c=[{value:"1. Update One",id:"1-update-one",level:2},{value:"Properties",id:"properties",level:3},{value:"2. Update Many",id:"2-update-many",level:2},{value:"Properties",id:"properties-1",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"update-records",children:"Update Records"}),"\n",(0,s.jsx)(t.p,{children:"The UpdateOne and UpdateMany blocks in Zeromagic allow you to modify existing records within a Cosmos DB container. These blocks offer the flexibility to update either a single record or multiple records simultaneously."}),"\n",(0,s.jsx)(t.h2,{id:"1-update-one",children:"1. Update One"}),"\n",(0,s.jsx)(t.p,{children:"Updates a single record by its ID in a Cosmos DB container."}),"\n",(0,s.jsx)(t.h3,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Container Name:"})," The name of the Cosmos DB container containing the record to be updated."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Record ID:"})," The unique identifier of the record to be updated."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Update Record:"})," The data that will be used to update the record."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Auto Create"}),": Create a collection if it doesnt exists in the container."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Returns"}),": Return a ",(0,s.jsx)(t.code,{children:"val"})," with the ID of newly created record."]}),"\n",(0,s.jsx)(t.h2,{id:"2-update-many",children:"2. Update Many"}),"\n",(0,s.jsx)(t.p,{children:"Updates multiple records based on a filter query in a Cosmos DB container."}),"\n",(0,s.jsx)(t.h3,{id:"properties-1",children:"Properties"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Container Name:"})," The name of the Cosmos DB container containing the record to be updated."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Filter Query"}),": A filter query used to identify the records to be updated. The filter query consists of a left value ",(0,s.jsx)(t.code,{children:"(field name)"})," and a right value ",(0,s.jsx)(t.code,{children:"(data to be evaluated)"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["It utilises the same condition syntax as the ",(0,s.jsx)(t.a,{href:"/restapi/flow-builder/blocks/flow-control/if-else#condition-editor",children:"If Conditions"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Update Record:"})," The data that will be used to update the record."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Auto Create"}),": Create a collection if it doesnt exists in the container."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Returns"}),": Return a ",(0,s.jsx)(t.code,{children:"val"})," with the IDs of newly created records."]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>a});var s=r(6540);const o={},n=s.createContext(o);function d(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);