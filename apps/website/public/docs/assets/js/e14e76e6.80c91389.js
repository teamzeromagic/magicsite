"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3522],{1901:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"build-your-first-graphql-api-in-minutes-with-zeromagic","metadata":{"permalink":"/docs/blog/build-your-first-graphql-api-in-minutes-with-zeromagic","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/build-your-first-graphql-api-in-minutes-with-zeromagic/index.md","source":"@site/blog/build-your-first-graphql-api-in-minutes-with-zeromagic/index.md","title":"Build your First GraphQL API in minutes with Zeromagic","description":"GraphqlBanner","date":"2024-06-10T10:00:00.000Z","tags":[{"label":"graphql","permalink":"/docs/blog/tags/graphql"},{"label":"tutorial","permalink":"/docs/blog/tags/tutorial"},{"label":"POST","permalink":"/docs/blog/tags/post"}],"readingTime":3.55,"hasTruncateMarker":true,"authors":[{"name":"Rohith ND","title":"Co-Founder","url":"https://ndrohith09.netlify.app/","email":"ndrohith09@gmail.com","imageURL":"https://avatars.githubusercontent.com/u/73429989?v=4","key":"rohith"}],"frontMatter":{"slug":"build-your-first-graphql-api-in-minutes-with-zeromagic","title":"Build your First GraphQL API in minutes with Zeromagic","tags":["graphql","tutorial","POST"],"authors":"rohith","date":"2024-06-10T10:00"},"unlisted":false,"nextItem":{"title":"Learn to use For Loops in Workflows","permalink":"/docs/blog/learn-to-use-for-loops-in-workflows"}},"content":"![GraphqlBanner](./graphql-thumbnail.png)\\n\\nGraphQL has taken the API world by storm, offering a powerful and flexible way to query and manipulate data. It allows you to request exactly the data your application needs, leading to cleaner code and faster development.\\n\\nIn this blog post, we\'ll dive into how you can leverage the Zeromagic Platform to create your very first GraphQL API. We\'ll explore the platform\'s features and guide you through the setup process, making it easy to get started with GraphQL and unlock its benefits for your projects.\\n\x3c!-- truncate --\x3e\\n\\n### Step 1: Login to Project Console\\nLogin to [Zeromagic Platform](https://github.com/) and go to you `Project Console`. Now navigate to `GraphQL` in the sidebar of the console.\\n \\n![GraphqlDashboard](./graphql-dashboard.png)\\n\\n\\n### Step 2: Create a GraphQL Endpoint\\n\\nNavigate to `Create GraphQL` button and this will open a form to create a GraphQL endpoint.\\n- Name : Name of the Graph API\\n- API Path: Define the base URL path that will be used to access the API endpoints. \\n\\n:::info Important\\n\\n`graphql/` will be appened to the base URL path. You can not pass anyother parameters such as query parameters, etc in the API Path field.\\n\\n:::\\n\\n```jsx title=\\"Example\\"\\nAPI Path: orders/\\nFinal GraphQL Endpoint: orders/graphql/\\n``` \\n\\n![Create Graphql](./create-graph.png)\\n\\nOnce created, click on the `GraphiQL` button, this will take you to the GraphQL console.\\n\\n### Step 3: Create a Database\\nCreate a database (BYOD or on-premises ) named `Forests` in your Database section in the project console.\\n\\n:::tip Reference\\nRefer here to know how to [Connect Databases to Zeromagic](/datasources/quickstart/)\\n:::\\n\\nThe created database will be listed in the `Connectors` section in the `GraphQL Console`\\n\\n![data-connector](data-connector.png)\\n \\n### Step 4: Create a logical model\\n\\nWithin each data source, you will see a list of tables displayed in an `not listed` tab initially. \\n\\n![table-manager](./table-manager.png)\\n\\nTo **list** a table, simply click on it and select the `list` option which will open the model editor. \\n\\n> A logical model is a representation of your data structure that will be used in your GraphQL schema. \\n\\nHere, you can define model fields and relationships, tailoring the model to fit your specific needs. After defining the model click on `Create Logical Model` button to create your logical model.\\n\\n![add-logical-model](./add-logical-model.png)\\n\\n\\n\x3c!-- Establish connections to your underlying data sources. These could be databases, APIs, or other services that hold the actual data your GraphQL endpoint will serve. \\n\\nSelect the database you want to connect\\nCreate the appropriate logical model for the tables in data source. Configure these connectors to allow your GraphQL schema to interact with the data effectively. --\x3e\\n\\n\\n:::tip Reference\\n- [Learn about Data connectors](/graphql/dataconnectors/)\\n- [Connect Databases to Zeromagic](/datasources/quickstart/)\\n:::\\n\\nOnce your logical model is defined, the Zeromagic platform will **automatically** generate the necessary schema for both mutations and queries. This ensures that your data is accurately represented and easily accessible through your GraphQL endpoint.\\n\\nThe `Listed` tab shows all the tables you\'ve chosen to list. Click on a specific table to view detailed information about the `logical model`. On this page, you can edit model fields and relationships, making adjustments as needed to reflect changes in your data structure or requirements.\\n\\n![listed](./listed.png)\\n \\n### Step 5: Graphql Schema Registry\\n\\nYou can view the `schema` by nagivating to the `GraphQL` page.\\n\\n![schema](./schema.png)\\n:::info Note\\nThe schema is automatically generated based on model fields and cannot be edited.\\n:::\\n\\n\\n### Step 5: Test in GraphiQL\\n\\nClick on the `GraphQL` option in the sidebar to open the GraphiQL playground. This interface allows you to test your queries and mutations in real-time, ensuring everything works as expected.\\n\\nThe GraphiQL interface includes three useful menus on the right sidebar:\\n\\n- **Show Documentation Explorer:** Access a detailed, interactive representation of your GraphQL schema. This helps you understand the available data types, fields, and relationships within your data.\\n- **Show History:** Review your previously executed queries for quick reference.\\n- **Show Data Explorer:** Visually navigate your data structures and explore them without writing complex queries.\\n\\n\\nBy following these steps, you will be able to connect your data sources, list tables, and create logical models on the Zeromagic platform. This process streamlines the creation of your GraphQL API, allowing you to focus on building robust and efficient applications. Get started today and experience the power of Zeromagic for yourself!"},{"id":"learn-to-use-for-loops-in-workflows","metadata":{"permalink":"/docs/blog/learn-to-use-for-loops-in-workflows","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/learn-to-use-for-loops-in-workflows/index.md","source":"@site/blog/learn-to-use-for-loops-in-workflows/index.md","title":"Learn to use For Loops in Workflows","description":"for-loop-banner","date":"2024-06-01T10:00:00.000Z","tags":[{"label":"tutorial","permalink":"/docs/blog/tags/tutorial"},{"label":"forloop","permalink":"/docs/blog/tags/forloop"},{"label":"workflow","permalink":"/docs/blog/tags/workflow"}],"readingTime":2.755,"hasTruncateMarker":true,"authors":[{"name":"Rohith ND","title":"Co-Founder","url":"https://ndrohith09.netlify.app/","email":"ndrohith09@gmail.com","imageURL":"https://avatars.githubusercontent.com/u/73429989?v=4","key":"rohith"}],"frontMatter":{"slug":"learn-to-use-for-loops-in-workflows","title":"Learn to use For Loops in Workflows","tags":["tutorial","forloop","workflow"],"authors":"rohith","date":"2024-06-01T10:00"},"unlisted":false,"prevItem":{"title":"Build your First GraphQL API in minutes with Zeromagic","permalink":"/docs/blog/build-your-first-graphql-api-in-minutes-with-zeromagic"},"nextItem":{"title":"Learn to use Cosmos Database Operations","permalink":"/docs/blog/learn-to-use-cosmos-database-operations"}},"content":"![for-loop-banner](./for-loop-banner.png)\\n\\nFor loops are a fundamental programming construct that enables you to repeat a set of actions a specified number of times. When integrated into workflows, for loops can significantly enhance your processes by automating repetitive tasks. This blog post will guide you through using for loop conditions in workflows, focusing on start, stop, and step values to create more efficient and smart processes.\\n\\nA for loop is a control flow statement that executes a block of code a certain number of times. In workflows, for loops are used to iterate over a range of values, performing specific actions at each iteration. The three main components of a for loop are:\\n\\n1. **Start:** The initial value of the loop variable.\\n2. **Stop:** The value at which the loop terminates.\\n3. **Step:** The increment (or decrement) by which the loop counter is updated after each iteration.\\n\\nThese components allow you to define the exact range and increments for your loop, providing precise control over the number of iterations.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Example: Using For Loops in a Workflow\\n\\nLet\'s consider a simple example to illustrate how to use for loops with start, stop, and step values in a workflow. Suppose we want to create a workflow that sums a sequence of even numbers from 1 to 11, incrementing by 2 each time.\\n\\nHere\u2019s how you can set it up:\\n\\n- Start Value: 1\\n- Stop Value: 11\\n- Step Value: 2\\n\\nThe workflow will execute the loop, starting from 1, and incrementing by 2 each time, until it reaches or exceeds 11.\\n\\n```py title=\\"Sample Pseudo Code\\" \\ntotal_sum = 0\\n\\nfor even_number in range(start_value, stop_value, step_value):\\n    # Perform your action here\\n    total_sum += even_number\\n\\nprint total_sum\\n```\\n### Step 1: Declare variables\\n\\nAdd a `Variable Block` to the workflow and create a new variable `total_sum` of type `Number` with initial value `0`.\\n\\n![forloop](./forloop.png)\\n\\n### Step 2: For Loop Block\\n\\nAdd a `For Loop Block` to the workflow and declare start, stop and step value.\\n![for-loop-var](./for-loop-var.png)\\n\\n### Step 3: Sum values inside Loop Block\\nClick on the `expand` icon on the For Loop Block and this prompts to flow builder page where you can build you logic. Add a `Variable` block to sum the values. \\n\\n![var-block](./var-block.png)\\n\\nTo access the current index of the use the following syntax\\n\\n```jsx\\n{{$forloop-name.val}} \\n```\\n\\n![even-sum](./even-sum.png)\\n\\n### Step 4: Build JSON Object\\n\\nAdd a new block called `Build JSON` and name it **json**. This block will be responsible for creating the final output of your workflow, which is in JSON format. In this case, we want to include the calculated `total_sum`.\\n\\n![json-block](./json-block.png)\\n\\n### Step 5: Return Success Response\\n \\nAdd a final block called `HTTP Response`. This block will send the response back to the system that triggered the workflow.Inside the \\"HTTP Response\\" block, configure it to return the **JSON object** you created in the previous step.\\n\\n![forloop-workflow](./forloop-workflow.png)\\n\\n\\n:::info Info \\nDocumentation of For Loop can be found [here](/restapi/flow-builder/blocks/flow-control/for-loop/)\\n:::\\n\\n\\nBy understanding and utilizing the start, stop, and step values, you can create highly efficient and precise loops to handle a variety of tasks. Whether you\'re generating sequences, processing data, or automating repetitive actions, for loops can make your workflows smarter and more effective. Try incorporating for loops into your workflows today and experience the benefits of automation and efficiency."},{"id":"learn-to-use-cosmos-database-operations","metadata":{"permalink":"/docs/blog/learn-to-use-cosmos-database-operations","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/learn-to-use-cosmos-database-operations/index.md","source":"@site/blog/learn-to-use-cosmos-database-operations/index.md","title":"Learn to use Cosmos Database Operations","description":"thumbnail","date":"2024-06-01T10:00:00.000Z","tags":[{"label":"tutorial","permalink":"/docs/blog/tags/tutorial"},{"label":"cosmos","permalink":"/docs/blog/tags/cosmos"},{"label":"database","permalink":"/docs/blog/tags/database"},{"label":"zeromagic-query-language","permalink":"/docs/blog/tags/zeromagic-query-language"}],"readingTime":6.53,"hasTruncateMarker":true,"authors":[{"name":"Rohith ND","title":"Co-Founder","url":"https://ndrohith09.netlify.app/","email":"ndrohith09@gmail.com","imageURL":"https://avatars.githubusercontent.com/u/73429989?v=4","key":"rohith"}],"frontMatter":{"slug":"learn-to-use-cosmos-database-operations","title":"Learn to use Cosmos Database Operations","tags":["tutorial","cosmos","database","zeromagic-query-language"],"authors":"rohith","date":"2024-06-01T10:00"},"unlisted":false,"prevItem":{"title":"Learn to use For Loops in Workflows","permalink":"/docs/blog/learn-to-use-for-loops-in-workflows"},"nextItem":{"title":"How to Use Multiple Environments to Fetch REST APIs","permalink":"/docs/blog/how-to-use-multiple-environments-to-fetch-rest-apis"}},"content":"![thumbnail](./thumbnail.png)\\n\\nDo you need a highly scalable and globally distributed NoSQL database for your modern application? Look no further than Azure Cosmos DB!\\n\\nIn this blog post, we will dive into the various operations you can perform on Azure Cosmos DB using the Zeromagic platform. Whether you need to create, read, update, or delete data, Zeromagic provides a set of predefined actions to help you manage your database efficiently. These operations include CreateOne, CreateMany, ReadOne, ReadMany, DeleteOne, DeleteMany, UpdateOne, UpdateMany, and Custom Filter queries. Let\'s explore each operation in detail to understand how you can use them to manage your Cosmos DB effectively.\\n\\n\x3c!-- truncate --\x3e\\n\\n:::info Reference \\n\\nCheck [here](/datasources/zeromagic-query-language/overview/) to learn more about Zeromagic Query Language\\n \\n:::\\n\\nLogin to [Zeromagic Platform](https://github.com/) and go to you `Project Console`. Now navigate to `Modules` in the sidebar of the console. Click on the necessary Module and navigate to the Flow Builder Page.\\n\\n## CreateOne\\n\\nThe `CreateOne` operation allows you to insert a single document into your Cosmos DB container. This is useful when you need to add individual records to your database.\\n\\n1. Add a CreateOne block to your workflow. Set the `record to add` field to `{{$request.body}}` so as to specify the data that will be used to create the new record.\\n2. In the `Http Response` block , set the `Response Variable` field to expression as `{{$block-name.val}}`.\\n \\n![CreateOne](./createOne.png)\\n\\n### Sample Test Data\\n\\n```jsx title=\\"Request Body Data\\"\\n{\\n    \\"id\\": \\"1\\",\\n    \\"name\\": \\"John Doe\\",\\n    \\"email\\": \\"john.doe@example.com\\",\\n    \\"courses\\" : [\\"maths\\", \\"science\\", \\"english\\"],\\n    \\"dept\\" : \\"CSE\\"\\n}\\n```\\n\\n```jsx title=\\"Response Data\\"\\n{\\n  \\"data-result\\": {\\n    \\"data\\": [\\n      {\\n        \\"_attachments\\": \\"attachments/\\",\\n        \\"_module\\": \\"rest\\",\\n        \\"_rid\\": \\"AZYTAK-jPQYFAAAAAAAAAA==\\",\\n        \\"_self\\": \\"dbs/AZYTAA==/colls/AZYTAK-jPQY=/docs/AZYTAK-jPQYFAAAAAAAAAA==/\\",\\n        \\"_ts\\": 1717046615,\\n        \\"courses\\": \\"[maths, science, english]\\",\\n        \\"dept\\": \\"CSE\\",\\n        \\"id\\": \\"1\\",\\n        \\"name\\": \\"John Doe\\"\\n        \\"email\\": \\"john.doe@example.com\\"\\n      }\\n    ]\\n  },\\n  \\"status\\": 200\\n}\\n```\\n\\n## CreateMany\\n\\nThe `CreateMany` operation enables you to insert multiple documents at once. This is ideal for batch operations where you need to add several records simultaneously.\\n\\n1. Add a CreateMany block to your workflow. Set the `Create Value` field to `{{$request.body}}` so as to specify the data that will be used to create the new record.\\n2. In the `Http Response` block , set the `Response Variable` field to expression as `{{$block-name.val}}`.\\n \\n![CreateMany](./createMany.png)\\n\\n### Sample Test Data\\n\\n```jsx title=\\"Request Body Data\\"\\n [\\n  {\\n    \\"id\\": \\"2\\",\\n    \\"name\\": \\"Jim Beam\\",\\n    \\"email\\": \\"jim.beam@example.com\\",\\n    \\"courses\\" : [\\"physics\\", \\"english\\"],\\n    \\"dept\\" : \\"ECE\\"\\n},\\n{\\n    \\"id\\": \\"3\\",\\n    \\"name\\": \\"Jane Doe\\",\\n    \\"email\\": \\"jane.doe@example.com\\",\\n    \\"courses\\" : [\\"maths\\", \\"science\\"],\\n    \\"dept\\" : \\"CSE\\"\\n} \\n]\\n```\\n\\n```jsx title=\\"Response Data\\"\\n{\\n  \\"data-result\\": {\\n    \\"data\\": [\\n      { \\n        \\"courses\\": \\"[maths, science, english]\\",\\n        \\"dept\\": \\"CSE\\",\\n        \\"id\\": \\"1\\",\\n        \\"name\\": \\"John Doe\\"\\n        \\"email\\": \\"john.doe@example.com\\"\\n      },\\n      { \\n        \\"courses\\": \\"physics, english]\\",\\n        \\"dept\\": \\"ECE\\",\\n        \\"id\\": \\"2\\",\\n        \\"name\\": \\"Jim Beam\\"\\n        \\"email\\": \\"jim.beam@example.com\\"\\n      },\\n      { \\n        \\"courses\\": \\"[maths, science]\\",\\n        \\"dept\\": \\"CSE\\",\\n        \\"id\\": \\"3\\",\\n        \\"name\\": \\"Jane Doe\\"\\n        \\"email\\": \\"jane.doe@example.com\\"\\n      }\\n    ]\\n  },\\n  \\"status\\": 200\\n}\\n```\\n \\n\\n## ReadOne\\n\\nThe `ReadOne` operation allows you to retrieve a single document based on its unique identifier. This is useful when you need to fetch specific records.\\n\\n1. Add a ReadOne block to your workflow. Set the `Record Id` field to `{{$request.body.id}}` so as to specify the data that will be used to create the new record.\\n2. In the `Http Response` block , set the `Response Variable` field to expression as `{{$block-name.val}}`.\\n\\n![readOne](./readOne.png)\\n\\n### Sample Test Data\\n\\n```jsx title=\\"Request Body Data\\"\\n{\\n    \\"id\\": \\"1\\"\\n}\\n```\\n\\n```jsx title=\\"Response Data\\"\\n{\\n  \\"data-result\\": {\\n    \\"data\\": [\\n      { \\n        \\"courses\\": \\"[maths, science, english]\\",\\n        \\"dept\\": \\"CSE\\",\\n        \\"id\\": \\"1\\",\\n        \\"name\\": \\"John Doe\\"\\n        \\"email\\": \\"john.doe@example.com\\"\\n      } \\n    ]\\n  },\\n  \\"status\\": 200\\n}\\n```\\n \\n## ReadMany\\n\\nThe `ReadMany` operation lets you fetch multiple documents that match a given criteria. This is beneficial for retrieving a set of records based on certain conditions.\\n\\n\\n1. Add a ReadMany block to your workflow.  Set the `Sort Key` field to **name**, which corresponds to the data key in the schema, and choose either `asc` or `desc` for the `Sort Order`, depending on how you want the data to be sorted.\\n\\n2. In the `Http Response` block , set the `Response Variable` field to expression as `{{$block-name.val}}`.\\n\\n![readMany](./readMany.png)\\n### Sample Test Data\\n\\n```jsx title=\\"Response Data\\"\\n{\\n  \\"data-result\\": {\\n    \\"data\\": [\\n      { \\n        \\"courses\\": \\"[maths, science]\\",\\n        \\"dept\\": \\"CSE\\",\\n        \\"id\\": \\"3\\",\\n        \\"name\\": \\"Jane Doe\\"\\n        \\"email\\": \\"jane.doe@example.com\\"\\n      },\\n      { \\n        \\"courses\\": \\"physics, english]\\",\\n        \\"dept\\": \\"ECE\\",\\n        \\"id\\": \\"2\\",\\n        \\"name\\": \\"Jim Beam\\"\\n        \\"email\\": \\"jim.beam@example.com\\"\\n      },\\n      { \\n        \\"courses\\": \\"[maths, science, english]\\",\\n        \\"dept\\": \\"CSE\\",\\n        \\"id\\": \\"1\\",\\n        \\"name\\": \\"John Doe\\"\\n        \\"email\\": \\"john.doe@example.com\\"\\n      } \\n    ]\\n  },\\n  \\"status\\": 200\\n}\\n```\\n## UpdateOne\\nThe `UpdateOne` operation allows you to modify a single document. This is helpful when you need to update specific fields of a record.\\n\\n1. Add a UpdateOne block to your workflow. Set the `Record Id` field to `{{$request.body.id}}` and `Update Value` to `{{$request.body.value}}` to specify the data that will be used to update the existing record.\\n2. In the `Http Response` block , set the `Response Variable` field to expression as `{{$block-name.val}}`.\\n\\n![updateOne](./updateOne.png)\\n### Sample Test Data\\n\\n```jsx title=\\"Request Body Data\\"\\n{\\n    \\"id\\": \\"1\\",\\n    \\"value\\":  {\\n      \\"name\\": \\"Maxwell\\",\\n      \\"email\\": \\"maxwell@example.com\\",\\n    }\\n}\\n```\\n\\n```jsx title=\\"Response Data\\"\\n{\\n  \\"data-result\\": {\\n    \\"data\\": [\\n      { \\n        \\"courses\\": \\"[maths, science, english]\\",\\n        \\"dept\\": \\"CSE\\",\\n        \\"id\\": \\"1\\",\\n        \\"name\\": \\"Maxwell\\"\\n        \\"email\\": \\"maxwell@example.com\\"\\n      } \\n    ]\\n  },\\n  \\"status\\": 200\\n}\\n```\\n\\n## UpdateMany\\n\\nThe `UpdateMany` operation allows you to modify multiple documents. This is helpful when you need to update specific batch of records.\\n\\n1. Add a UpdateMany block to your workflow. Set the `Filter Query` field to your desired query according to your data retrieval and `Update Value` to `{{$request.body}}` to specify the data that will be used to update the existing record.\\n2. In the `Http Response` block , set the `Response Variable` field to expression as `{{$block-name.val}}`.\\n\\n![updateMany](./updateMany.png) \\n### Sample Test Data\\n\\n```jsx title=\\"Response Data\\"\\n{\\n  \\"data-result\\": {\\n    \\"data\\": [\\n      \\n    ]\\n  },\\n  \\"status\\": 200\\n}\\n```\\n\\n\\n## DeleteOne\\n\\nThe `DeleteOne` operation deletes a single document based on its unique identifier. This is useful for removing individual records such as deleting a user account.\\n\\n1. Add a DeleteOne block to your workflow. Set the `Record Id` field to `{{$request.body.id}}` so as to specify the data that will be used to create the new record.\\n2. In the `Http Response` block , set the `Response Variable` field to expression as `{{$block-name.val}}`.\\n\\n\\n![deleteOne](./deleteOne.png)\\n### Sample Test Data\\n\\n```jsx title=\\"Request Body Data\\"\\n{\\n    \\"id\\": \\"1\\" \\n}\\n```\\n\\n```jsx title=\\"Response Data\\"\\n{\\n  \\"data-result\\": {\\n    \\"data\\": [\\n      \\n    ]\\n  },\\n  \\"status\\": 200\\n}\\n```\\n\\n## DeleteMany\\n\\nThe `DeleteMany` operation deletes multiple documents based on a query. This is ideal for bulk deletions such as removing all inactive accounts.\\n\\n1. Add a DeleteMany block to your workflow. Set the `Delete Query` field to your desired query according to the data that will be used to delete the existing record.\\n2. In the `Http Response` block , set the `Response Variable` field to expression as `{{$block-name.val}}`.\\n\\n![deleteMany](./deleteMany.png)\\n\\n### Sample Test Data\\n\\n```jsx title=\\"Response Data\\"\\n{\\n  \\"data-result\\": {\\n    \\"data\\": [\\n      \\n    ]\\n  },\\n  \\"status\\": 200\\n}\\n```\\n\\n## CustomQuery\\n\\nThe `CustomQuery` operation allows for complex querying with custom filters. This is ideal for advanced data retrieval scenarios like filtering users by multiple criteria.\\n\\n:::info Reference \\n\\nCheck [here](/datasources/zeromagic-query-language/operators-property/) to learn more about Zeromagic Query Operators and Property.\\n \\n:::\\n\\n1. Add a CustomQuery block to your workflow. Set the `Custom Aggregate Query` field to your desired query according to the data that will be used to manipulate the existing record.\\n2. In the `Http Response` block , set the `Response Variable` field to expression as `{{$block-name.val}}`.\\n\\n\\n![CustomQuery](./customQuery.png)\\n\\n### Sample Test Data\\n\\n```jsx title=\\"Response Data\\"\\n{\\n  \\"data-result\\": {\\n    \\"data\\": [\\n      \\n    ]\\n  },\\n  \\"status\\": 200\\n}\\n```\\n\\nUnderstanding and utilizing these operations will empower you to manage your Cosmos Database effectively, whether you need to create, read, update, or delete data. Our platform simplifies these tasks, enabling you to focus on building robust applications with ease.\\n\\nExplore the power of Cosmos Database operations on our platform and elevate your data management capabilities today!"},{"id":"how-to-use-multiple-environments-to-fetch-rest-apis","metadata":{"permalink":"/docs/blog/how-to-use-multiple-environments-to-fetch-rest-apis","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/how-to-use-multiple-environments-to-fetch-rest-apis/index.md","source":"@site/blog/how-to-use-multiple-environments-to-fetch-rest-apis/index.md","title":"How to Use Multiple Environments to Fetch REST APIs","description":"env-banner","date":"2024-05-30T10:00:00.000Z","tags":[{"label":"workflow","permalink":"/docs/blog/tags/workflow"},{"label":"tutorial","permalink":"/docs/blog/tags/tutorial"},{"label":"GET","permalink":"/docs/blog/tags/get"},{"label":"POST","permalink":"/docs/blog/tags/post"}],"readingTime":3.47,"hasTruncateMarker":true,"authors":[{"name":"Rohith ND","title":"Co-Founder","url":"https://ndrohith09.netlify.app/","email":"ndrohith09@gmail.com","imageURL":"https://avatars.githubusercontent.com/u/73429989?v=4","key":"rohith"}],"frontMatter":{"slug":"how-to-use-multiple-environments-to-fetch-rest-apis","title":"How to Use Multiple Environments to Fetch REST APIs","tags":["workflow","tutorial","GET","POST"],"authors":"rohith","date":"2024-05-30T10:00"},"unlisted":false,"prevItem":{"title":"Learn to use Cosmos Database Operations","permalink":"/docs/blog/learn-to-use-cosmos-database-operations"},"nextItem":{"title":"Build Your First REST API in minutes using Zeromagic Flow Builder","permalink":"/docs/blog/build-your-first-rest-api-in-minutes-using-zeromagic-flow-builder"}},"content":"![env-banner](./env-banner.png)\\n\\nimport Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nIn this blog post, we will explore how to leverage multiple environments on our platform to efficiently manage and fetch REST APIs. Our platform allows you to define different environments, each with its own base URL, making it easier to handle development, testing, and production stages of your applications.\\n \\n\\n### What is an Environment?\\n\\nAn environment is a distinct configuration setting that defines the base URL and other specific parameters for your REST APIs. This setup allows you to switch between different stages of your application, such as development, testing, and production, without changing the core code.\\n\\n### Why Use Multiple Environments?\\n\\nUsing multiple environments helps you:\\n\\n- Isolate Development Stages: Keep development, testing, and production settings separate.\\n- Avoid Configuration Errors: Minimize the risk of using incorrect URLs or settings.\\n- Facilitate Testing: Test APIs in different scenarios without affecting production data.\\n- Flexibility: Easily switch between environments based on your needs.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Setting Up Multiple Environments\\n\\nStart by defining the different environments you need in the `Environments` section of the `Project Console`. Common examples include Development, Testing, and Production. Each environment will have its own base URL.\\n\\n![Environments](./environments.png)\\n\\nIn your application, you can switch between environments based on your current stage. This can be done by setting the environment configuration at runtime.\\n\\n:::info Information\\n\\nReference: [Learn to Create Environment](/basics/environment/)\\n \\n::: \\n\\n\\n## Fetching REST APIs with Environments\\n\\n\\nLet\u2019s say you have an API endpoint to fetch user data. The endpoint remains the same across environments, but the base URL changes.\\n\\nYour platform has two environments: development (dev) and production (prod).\\n\\n- Development Environment: Base URL: `https://dev.your-api.com/api/v1`\\n- Production Environment: Base URL: `https://prod.your-api.com/api/v1`\\n\\n\\n### Step 1: Create a Function to Fetch Data\\nCreate a function to fetch user data that dynamically uses the base URL based on the current environment.\\n\\n\\n<Tabs groupId=\\"operating-systems\\">\\n  <TabItem value=\\"javascript\\" label=\\"Javascript\\">\\n\\n  ```js\\n\\n  const APP_KEY = \\"your_app_key\\"\\n\\n  async function fetchUserData(environment, userId) {\\n  const baseUrl = environment.baseUrl;\\n  const appKey = environment.appKey;\\n  const endpoint = `/users/${userId}`;\\n  const url = `${baseUrl}${endpoint}`;\\n\\n  const headers = {\\n    \'APP_KEY\': `${APP_KEY}`\\n  };\\n\\n  try {\\n    const response = await fetch(url, {\\n      method: \'GET\',\\n      headers: headers\\n    });\\n\\n    if (!response.ok) {\\n      throw new Error(`Error fetching user data: ${response.statusText}`);\\n    }\\n\\n    const data = await response.json();\\n    console.log(\'User Data:\', data);\\n    return data;\\n  } catch (error) {\\n    console.error(error);\\n    return null;\\n  }\\n}\\n\\n  ```\\n  </TabItem>\\n  <TabItem value=\\"python\\" label=\\"Python\\">\\n\\n  ```py\\n  import requests\\n\\nAPP_KEY = \\"your_app_key\\"\\n\\ndef fetch_user_data(environment, user_id):\\n    base_url = environment[\\"base_url\\"]\\n    endpoint = f\\"/users/{user_id}\\"\\n    url = f\\"{base_url}{endpoint}\\"\\n\\n    headers = {\\n        \\"APP_KEY\\": f\\"{APP_KEY}\\"\\n    }\\n\\n    try:\\n        response = requests.get(url, headers=headers)\\n        response.raise_for_status()  # Raise an error for bad status codes\\n        data = response.json()\\n        print(\'User Data:\', data)\\n        return data\\n    except requests.exceptions.RequestException as e:\\n        print(f\\"Error fetching user data: {e}\\")\\n        return None\\n\\n  ```  \\n  </TabItem>\\n</Tabs>\\n\\n\\n\\n:::info Information\\nEnsure your APP_KEY is securely managed using secrets in the production environment. \\n::: \\n\\n### Step 2: Set the Current Environment\\n\\nA dictionary `environments` holds the configuration for different environments created in the Zeromagic platform. \\n\\n<Tabs groupId=\\"operating-systems\\">\\n  <TabItem value=\\"javascript\\" label=\\"Javascript\\">\\n  \\n  ```js\\n  const environments = {\\n    development: {\\n        name: \\"Development\\",\\n        baseUrl: \\"https://dev.api.yourplatform.com\\"\\n    },\\n    production: {\\n        name: \\"Production\\",\\n        baseUrl: \\"https://api.yourplatform.com\\"\\n    }\\n};\\n\\n// Set the current environment\\nconst currentEnvironment = environments.development;\\n```\\n  \\n  </TabItem>\\n  <TabItem value=\\"python\\" label=\\"Python\\">\\n  \\n  ```py\\n  environments = {\\n    \\"development\\": {\\n        \\"name\\": \\"Development\\",\\n        \\"base_url\\": \\"https://dev.api.yourplatform.com\\"\\n    }, \\n    \\"production\\": {\\n        \\"name\\": \\"Production\\",\\n        \\"base_url\\": \\"https://api.yourplatform.com\\"\\n    }\\n}\\n\\n# Set the current environment\\ncurrent_environment = environments[\\"development\\"]\\n  ```\\n  </TabItem>\\n</Tabs>\\n\\n### Step 3: Fetch Data Using the Current Environment\\n\\nThe function fetch_user_data is called with the current environment and a user ID to fetch the user data.\\n\\n<Tabs groupId=\\"operating-systems\\">\\n  <TabItem value=\\"javascript\\" label=\\"Javascript\\">\\n  \\n  ```js\\nfetchUserData(currentEnvironment, 12345);\\n```\\n  \\n  </TabItem>\\n  <TabItem value=\\"python\\" label=\\"Python\\">\\n  \\n  ```py \\nuser_data = fetch_user_data(current_environment, 12345)\\n  ```\\n  </TabItem>\\n</Tabs>\\n\\n\\nThis approach allows you to dynamically switch between different environments by simply changing the value of current environment, making your API management more flexible and robust.\\n\\nUsing multiple environments to fetch REST APIs is a powerful strategy to manage different stages of your application lifecycle. By defining distinct configurations for development, testing, and production, you can isolate and control your API interactions effectively. This not only enhances your development workflow but also ensures that your application remains robust and error-free across various environments."},{"id":"build-your-first-rest-api-in-minutes-using-zeromagic-flow-builder","metadata":{"permalink":"/docs/blog/build-your-first-rest-api-in-minutes-using-zeromagic-flow-builder","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/build-your-first-rest-api-in-minutes-using-zeromagic-flow-builder/index.md","source":"@site/blog/build-your-first-rest-api-in-minutes-using-zeromagic-flow-builder/index.md","title":"Build Your First REST API in minutes using Zeromagic Flow Builder","description":"restapi-banner","date":"2024-05-27T10:00:00.000Z","tags":[{"label":"workflow","permalink":"/docs/blog/tags/workflow"},{"label":"tutorial","permalink":"/docs/blog/tags/tutorial"},{"label":"GET","permalink":"/docs/blog/tags/get"},{"label":"POST","permalink":"/docs/blog/tags/post"}],"readingTime":3.55,"hasTruncateMarker":true,"authors":[{"name":"Rohith ND","title":"Co-Founder","url":"https://ndrohith09.netlify.app/","email":"ndrohith09@gmail.com","imageURL":"https://avatars.githubusercontent.com/u/73429989?v=4","key":"rohith"}],"frontMatter":{"slug":"build-your-first-rest-api-in-minutes-using-zeromagic-flow-builder","title":"Build Your First REST API in minutes using Zeromagic Flow Builder","tags":["workflow","tutorial","GET","POST"],"authors":"rohith","date":"2024-05-27T10:00"},"unlisted":false,"prevItem":{"title":"How to Use Multiple Environments to Fetch REST APIs","permalink":"/docs/blog/how-to-use-multiple-environments-to-fetch-rest-apis"},"nextItem":{"title":"Using For Loops with Items in Workflows for Sending Promotional SMS Messages","permalink":"/docs/blog/using-for-loops-with-items-in-workflows-for-sending-promotional-sms-messages"}},"content":"![restapi-banner](./restapi-banner.png)\\n\\nIn this blog post, we\'ll explore how to create your first REST API on the Zeromagic Platform. Whether you\'re a beginner or an experienced developer, our intuitive Workflow Builder will guide you through setting up endpoints, defining data models, and handling HTTP requests. Let\'s dive in and see how you can quickly build and deploy a functional REST API with GET and POST methods, empowering your applications with seamless data interactions.\\n\\n### Step 1: Login to Project Console\\nLogin to [Zeromagic Platform](https://github.com/) and go to you `Project Console`. Now navigate to `Rest API` in the sidebar of the console.\\n\\n![ModuleDashboard](./module_console.png)\\n\\n\x3c!-- truncate --\x3e\\n\\n:::info Information\\n\\nModules are often used to structure and organize API endpoints when building RESTful APIs. Each module can represent a specific domain or resource within your application.\\n \\n:::\\n\\n### Step 2: Create a new Module\\n\\nNow click on `Create Module` button to create a new module. This open a form to create a new module. Enter the `Name` and `API path` of the module.\\n\\n> Note : API Path only follows the trailing slash.\\n\\n\\n![CreateModule](./create-module.png)\\n\\nOnce module is created, click on the module and you will be directed to the Flow Builder Page where you can create your `Rest API`. \\n\\n### Step 3: Create a new Rest API\\n\\nLook for a button labeled `Create Rest API` or `+` in the API List space within the interface. This button will initiate the process of creating a new REST API definition.\\n    - `Name` : Name of the API\\n    - `Description`:Short description of the API\\n    - `API Route`: Define the base URL path that will be used to access the API endpoints. This path can include path parameters (indicated by `{<param>}`) to capture dynamic values in the URL.    \\n    **Example**: `/users/{userId}` (where `{userId}` would be a variable placeholder captured from the request URL).\\n    - `Authentication Method`: If your API requires authentication to access certain or all resources, select the appropriate authentication method. Check on the Authentication to know more about authentication methods. \\n    - `Request Method`: Specify the HTTP method that clients should use to interact with your API.\\n\\n![CreateAPI](./create-api.png)\\n\\n### Step 4: Update Workflow to create Spell data in Database\\n\\nThe Worflow builder has 3 basic Blocks such `API Endpoint`, `Build JSON` and `HTTP Response` in the workflow canvas.  \\n\\n![Workflow Builder](./create-spell-workflow-builder.png)\\n\\nNow let\'s add `Cosmos Create One` block in the workflow to create `Spell` data in the database. \\n\\n> Assuming that the database is configured in the Database section of the Project Console.\\n\\nIn the options panel of the `Cosmos Create One` you can find the **container name** is predefined in `Free-Plan`. Now in the `Record to add` field set the body data of request. \\n\\n![Request Body](./create-body.png)\\n\\nToggle on `Auto create` to automatically create a new instance of the schema with the specified container if it is not already created.\\n\\n\\nNow in the `HTTP Response` update the **Response Variable** to `{{$createOne.val}}` which is output of the Cosmos Create One.\\n\\n![CreateOne Spell](./createOne-spell.png)\\n\\n:::info Note\\n\\nHTTP Response blocks accepts only **JSON** as response. Make sure your value in response is a JSON.\\n\\n:::\\n\\nNow click on the `Deploy` button such that the API is automatically deployed and can be accessed in the specific environment.\\n\\n### Step 5: Test the POST method\\n\\nYou can access the API by selecting the specific environment you need. You can find the **API Endpoint** in the `Details` tab.\\n\\n### Step 6: Create new flow to GET Spell Data from DB\\n\\nNow let\'s create a new **Rest API** to fetch Spell data. Click on the `+` icon on the RestAPI List section. Enter the details of the API required to fetch the Spell data.\\n\\nAdd the `Cosmos Read Many` block in the workflow to get all the information of the `Spells` from the database. Add the `Sort Key` and `Sort Order` in the Options panel.\\n\\nNow in the `HTTP Response` update the **Response Variable** to `{{$readMany.val}}` which is output of the Cosmos Read Many.\\n\\n![Read Many Spells](./readMany-spells.png)\\n\\nNow click on the `Deploy` button such that the API is automatically deployed and can be accessed in the specific environment.\\n\\n\\n### Step 7: Test the GET method\\n\\nYou can access the API by selecting the specific environment you need. You can find the **API Endpoint** in the `Details` tab."},{"id":"using-for-loops-with-items-in-workflows-for-sending-promotional-sms-messages","metadata":{"permalink":"/docs/blog/using-for-loops-with-items-in-workflows-for-sending-promotional-sms-messages","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/using-for-loops-with-items-in-workflows-for-sending-promotional-sms-messages/index.md","source":"@site/blog/using-for-loops-with-items-in-workflows-for-sending-promotional-sms-messages/index.md","title":"Using For Loops with Items in Workflows for Sending Promotional SMS Messages","description":"for-sms-banner","date":"2024-05-27T10:00:00.000Z","tags":[{"label":"tutorial","permalink":"/docs/blog/tags/tutorial"},{"label":"forloop","permalink":"/docs/blog/tags/forloop"},{"label":"workflow","permalink":"/docs/blog/tags/workflow"},{"label":"twilio","permalink":"/docs/blog/tags/twilio"}],"readingTime":2.555,"hasTruncateMarker":true,"authors":[{"name":"Rohith ND","title":"Co-Founder","url":"https://ndrohith09.netlify.app/","email":"ndrohith09@gmail.com","imageURL":"https://avatars.githubusercontent.com/u/73429989?v=4","key":"rohith"}],"frontMatter":{"slug":"using-for-loops-with-items-in-workflows-for-sending-promotional-sms-messages","title":"Using For Loops with Items in Workflows for Sending Promotional SMS Messages","tags":["tutorial","forloop","workflow","twilio"],"authors":"rohith","date":"2024-05-27T10:00"},"unlisted":false,"prevItem":{"title":"Build Your First REST API in minutes using Zeromagic Flow Builder","permalink":"/docs/blog/build-your-first-rest-api-in-minutes-using-zeromagic-flow-builder"},"nextItem":{"title":"Decision-Making with If-Else Conditions in Flow Builder","permalink":"/docs/blog/decision-making-with-if-else-conditions-in-flow-builder"}},"content":"![for-sms-banner](./for-sms-banner.png)\\n\\nFor loops are a fundamental programming construct that allows you to repeat a set of actions a specified number of times. When integrated into workflows, for loops can make your processes smarter and more efficient by automating repetitive tasks. This blog post will guide you through the world of for loop conditions in workflows, demonstrating how to use them effectively.\\n \\n## How ForLoop Works:\\n\x3c!-- A for loop is a control flow statement that executes a block of code a certain number of times. It typically includes three main components: --\x3e\\n\\nA for loop is a control flow statement that executes a block of code for each item in a collection. This approach simplifies looping by allowing you to directly work with collections, making your workflows more intuitive and streamlined.\\n\\n1. **Collection**: The array or list of items that the workflow will iterate over. \\n\\n2. **Current Item:** The current item being processed in the loop.\\n\\n\\n\x3c!-- The workflow will loop over the array of objects and each object can be accesses within the for loop by using the syntax  --\x3e\\n\x3c!-- \\n```\\n{{$action-name.val.object-key}}\\n``` --\x3e\\n\\n\x3c!-- 1. **Start:** The initial value of the loop variable.\\n2. **Stop:** The condition that, when met, will terminate the loop.\\n3. **Step:** The value by which the loop variable is incremented or decremented each iteration. --\x3e\\n\\nBy setting these values, you can control how many times the loop runs and tailor it to your specific needs.\\n\\n### 1. Get Customer data from database\\n\\nCreate a `Cosmos Read Many Block` to fetch all customers from the database.\\n\\n![readmany-customers](./readmany-customers.png)\\n\\n\x3c!-- truncate --\x3e\\n\\n### 2. Define the For Loop Collection:\\n\\n- Loop over collection: Set the customer collection.\\n```jsx\\nfor customer in customers:\\n// Send SMS to each customer\\n```\\n\\n\x3c!-- - start: Set the initial index to `0`.\\n- stop: Set the condition to the length of the customer list.\\n```jsx\\nlen({{$customers.val}})\\n```\\n- step: Increment the index by `1` for each iteration.\\n\\n```jsx title=\\"Sample Pseudo Code\\"\\nfor (let i = 0; i < customers.length; i++) {\\n    // Send SMS to each customer\\n}\\n``` --\x3e\\n\\n![for-loop-items](./for-loop-items.png)\\n\\n### 3. Send SMS Using Twilio\\n\\nClick on the expand icon on `Unit Block` and it will expand you to Builder page where you can build logics of the loop.\\n\\n```jsx title=\\"Sample Pseudo Code\\" \\nfor customer in customers:  \\n\\n    twilioClient.messages.create({\\n        body: \\"Don\'t miss our special promotion!\\",\\n        from: \'+YourTwilioNumber\',\\n        to: customer.phoneNumber\\n    })\\n```\\n\\nAdd a `Twilio` block inside the loop. \\nTo access the current object in the collection, use the syntax below \\n```jsx \\n{{$forLoop.val.phoneNumber}}\\n```\\n\\n:::info Info \\nMake sure that Twilio is connected to the platform. Guide to Twilio integration can be found [here](/integrations/twilio/)\\n:::\\n\\n\x3c!-- ```jsx title=\\"Sample Pseudo Code\\"\\nfor (let i = 0; i < customers.length; i++) {\\n    let customer = customers[i]; \\n\\n    twilioClient.messages.create({\\n        body: \\"Don\'t miss our special promotion!\\",\\n        from: \'+YourTwilioNumber\',\\n        to: customer.phoneNumber\\n    })\\n}\\n``` --\x3e\\n\\n![twilio-sms](./twilio-sms.png)\\n\\n### 4. Send Success Response\\n\\nCreate a `Build JSON` block to be used in `Http Response` block to send a successful response.\\n\\n```jsx\\n{\\n    \\"response\\": \\"Promotions sent successfully\\"\\n}\\n```\\n\\n![for-loop-response](./for-loop-response.png)"},{"id":"decision-making-with-if-else-conditions-in-flow-builder","metadata":{"permalink":"/docs/blog/decision-making-with-if-else-conditions-in-flow-builder","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/decision-making-with-if-else-conditions-in-workflows/index.md","source":"@site/blog/decision-making-with-if-else-conditions-in-workflows/index.md","title":"Decision-Making with If-Else Conditions in Flow Builder","description":"This blog post will guide you through the world of if-else conditions in workflows, making your processes smarter and more efficient.","date":"2024-05-26T10:00:00.000Z","tags":[{"label":"tutorial","permalink":"/docs/blog/tags/tutorial"},{"label":"ifelse","permalink":"/docs/blog/tags/ifelse"},{"label":"flow-builder","permalink":"/docs/blog/tags/flow-builder"}],"readingTime":1.915,"hasTruncateMarker":true,"authors":[{"name":"Rohith ND","title":"Co-Founder","url":"https://ndrohith09.netlify.app/","email":"ndrohith09@gmail.com","imageURL":"https://avatars.githubusercontent.com/u/73429989?v=4","key":"rohith"}],"frontMatter":{"slug":"decision-making-with-if-else-conditions-in-flow-builder","title":"Decision-Making with If-Else Conditions in Flow Builder","tags":["tutorial","ifelse","flow-builder"],"authors":"rohith","date":"2024-05-26T10:00"},"unlisted":false,"prevItem":{"title":"Using For Loops with Items in Workflows for Sending Promotional SMS Messages","permalink":"/docs/blog/using-for-loops-with-items-in-workflows-for-sending-promotional-sms-messages"},"nextItem":{"title":"Connecting Your Azure Cosmos DB to Zeromagic in minutes","permalink":"/docs/blog/connect-your-azure-cosmos-db-to-zeromagic-in-minutes"}},"content":"This blog post will guide you through the world of if-else conditions in workflows, making your processes smarter and more efficient. \\n\\nThe if-else condition is a basic programming construct used to execute different actions based on whether a condition is true or false.If-else conditions work similarly in workflow automation.If-else conditions can be used to direct the flow of tasks, handle exceptions, and ensure that the workflow adapts to varying inputs and scenarios.\\n\\n![thumbnail](./thumbnail.png)\\n\\n## How IfElse Works:\\n\\n1. **Set a Condition:** Define a condition that needs to be met, like `Order amount is greater than $100` or `Customer location is in Europe`.\\n\\n2. **Evaluate the Condition:** The workflow checks if the condition is true or false.\\n\\n3. **Branch Out:** Based on the outcome, the workflow follows a predetermined path:\\n - _If True:_ Execute the actions associated with the `true` branch.\\n - _Else:_ Execute the actions associated with the `else` branch.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Example Scenario : Check if Order has Discount \\n\\nLet\'s consider an e-commerce workflow where we need to check if an order qualifies for a discount. The criteria could be:\\n- The total order value exceeds $100.\\n- The customer is a premium member.\\n- The order is placed during a special promotion period.\\n\\n```jsx title=\\"Example\\"\\nIf (orderValue > 100 && (isPremiumMember || isPromotionPeriod) ) {\\n    // Logic to apply discount\\n    return {\\"response\\" : \\"Discount Applied\\"}\\n} else { \\n    // Regular order processing\\n    return {\\"response\\" : \\"Discount Not Applied\\"}\\n}\\n```\\n\\n### Setting up workflow\\n1. Create a `Post` method which will take body data as `orderValue`, `isPremiumMember`, and `isPromotionPeriod`.\\n\\n![discount-api](./discount-api.png)\\n\\n2. Using an if-else, evaluate the combined condition to check if the combined criteria are met.\\n\\n![discount-condition](./discount-condition.png)\\n\\n3. Add a JSON block with Action name as `true_json` in True branch with `key=response` and `value=Discount Applied`. Update the Response Block output to `{{$true_json.val}}` and status code to `200`.\\n\\n```json title=\\"Sample True Response\\" \\n{\\n    \\"response\\": \\"Discount Applied\\"\\n}\\n```\\n\\n4. Add a JSON block with Action name as `false_json` in False branch with `key=response` and `value=Discount Not Applied`. Update the Response Block output to `{{$false_json.val}}`and status code to `200`.\\n\\n```json title=\\"Sample False Response\\" \\n{\\n    \\"response\\": \\"Discount Not Applied\\"\\n}\\n```\\n![discount-flow](./discount-flow.png)\\n\\n5. Click `Deploy` to update the flow and to utilise your API.\\n\\n![discount-sucess](./discount-sucess.png)\\n\\n### Testing the Discount API using Postman"},{"id":"connect-your-azure-cosmos-db-to-zeromagic-in-minutes","metadata":{"permalink":"/docs/blog/connect-your-azure-cosmos-db-to-zeromagic-in-minutes","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/connect-your-azure-cosmos-db-to-zeromagic-in-minutes/index.md","source":"@site/blog/connect-your-azure-cosmos-db-to-zeromagic-in-minutes/index.md","title":"Connecting Your Azure Cosmos DB to Zeromagic in minutes","description":"thumbnail","date":"2024-05-25T10:00:00.000Z","tags":[{"label":"tutorial","permalink":"/docs/blog/tags/tutorial"},{"label":"database","permalink":"/docs/blog/tags/database"},{"label":"datasource","permalink":"/docs/blog/tags/datasource"},{"label":"azure-cosmosdb","permalink":"/docs/blog/tags/azure-cosmosdb"}],"readingTime":1.79,"hasTruncateMarker":true,"authors":[{"name":"Rohith ND","title":"Co-Founder","url":"https://ndrohith09.netlify.app/","email":"ndrohith09@gmail.com","imageURL":"https://avatars.githubusercontent.com/u/73429989?v=4","key":"rohith"}],"frontMatter":{"slug":"connect-your-azure-cosmos-db-to-zeromagic-in-minutes","title":"Connecting Your Azure Cosmos DB to Zeromagic in minutes","tags":["tutorial","database","datasource","azure-cosmosdb"],"authors":"rohith","date":"2024-05-25T10:00"},"unlisted":false,"prevItem":{"title":"Decision-Making with If-Else Conditions in Flow Builder","permalink":"/docs/blog/decision-making-with-if-else-conditions-in-flow-builder"},"nextItem":{"title":"MDX Blog Post","permalink":"/docs/blog/mdx-blog-post"}},"content":"![thumbnail](./thumbnail.png)\\n\\nIn this blog post, we\'ll guide you through connecting your external database, specifically Azure Cosmos DB, to the Zeromagic Platform in a matter of minutes. This seamless integration unlocks the power of Zeromagic\'s functionalities for your Cosmos DB data, allowing for efficient data management and automation.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Steps to Connect Your Cosmos DB to Zeromagic\\n\\n### 1. Log In and Navigate to Database\\n- Log in to the [Zeromagic Platform](https://github.com/).\\n- Go to your `Project Console`.\\n- Navigate to the `Database` section in the sidebar of the console.\\n- Click on `Create Database` to start the process of creating a new database.\\n\\n![db-section](./db-section.png)\\n\\n\\n### 2. Enter Database Source Information\\n\\n- Provide a `Database Source Name` to help identify your database source on the platform.\\n- Select the appropriate `Database Provider` to connect to your database.\\n\\n### 3. Toggle External Connection\\n- Enable the `External Connection` option to use an external connection for database integration.\\n\\n### 4. Configure Database Connection\\n\\n- **Cosmos Database Name:** Enter the exact name you assigned to your Cosmos DB database in Azure.\\n\\n![cosmos-db-name](@site/static/img/cosmos-db-name.png)\\n\\n- **Connection URI:** Locate and provide the unique connection URI for your Cosmos DB account. You can find this string within the Azure portal for your specific Cosmos DB instance. This URI acts as a secure access key.\\n\\n- **Connection Key:** Select either the `PRIMARY KEY` or `SECONDARY KEY` as your connection method to access your Cosmos DB. It\'s recommended to use the secondary key for everyday operations and keep the primary key as a backup for critical situations.\\n\\n![cosmos-config](@site/static/img/cosmos-config.png)\\n\\n### 5. Connect Database\\n\\nClick on the `Connect Database` button to establish the connection between your external Cosmos DB and your Zeromagic project.\\n\\n![cosmos-ext-db](@site/static/img/create-ext-db.png)\\n\\n\\n### 6. Test Database Connection\\n\\nOnce you have established the connection, you can **test** the connection by clicking on `Test Connection`. \\n\\n![cosmos-ext-db-conn](./ext-db.png)\\n\\n:::info Note\\n\\n**Connection Limitations:** This connection method is currently only compatible with Azure Cosmos DB for NoSQL databases.\\n\\n**Creating a Cosmos DB:** If you don\'t have an existing Cosmos DB account, you can follow the official Microsoft tutorial to set one up: https://learn.microsoft.com/en-us/azure/cosmos-db/try-free\\n:::\\n\\n### References\\n\\n[Try Azure Cosmos DB free](https://learn.microsoft.com/en-us/azure/cosmos-db/try-free)"},{"id":"mdx-blog-post","metadata":{"permalink":"/docs/blog/mdx-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","tags":[{"label":"docusaurus","permalink":"/docs/blog/tags/docusaurus"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[{"name":"Rohith ND","title":"Co-Founder","url":"https://ndrohith09.netlify.app/","email":"ndrohith09@gmail.com","imageURL":"https://avatars.githubusercontent.com/u/73429989?v=4","key":"rohith"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["rohith"],"tags":["docusaurus"]},"unlisted":false,"prevItem":{"title":"Connecting Your Azure Cosmos DB to Zeromagic in minutes","permalink":"/docs/blog/connect-your-azure-cosmos-db-to-zeromagic-in-minutes"},"nextItem":{"title":"Long Blog Post","permalink":"/docs/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n\\n:::"},{"id":"long-blog-post","metadata":{"permalink":"/docs/blog/long-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","tags":[{"label":"hello","permalink":"/docs/blog/tags/hello"},{"label":"docusaurus","permalink":"/docs/blog/tags/docusaurus"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Rohith ND","title":"Co-Founder","url":"https://ndrohith09.netlify.app/","email":"ndrohith09@gmail.com","imageURL":"https://avatars.githubusercontent.com/u/73429989?v=4","key":"rohith"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"rohith","tags":["hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"MDX Blog Post","permalink":"/docs/blog/mdx-blog-post"}},"content":"This is the summary of a very long blog post,\\n\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\n\\n\x3c!--truncate--\x3e\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}')}}]);